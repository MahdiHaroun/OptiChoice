name: Rebuild and Deploy to DigitalOcean

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      full_deploy:
        description: "Full deployment (includes restarting all containers)"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          cd OPC
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "Install failed but continuing"

      - name: Run Django tests
        run: |
          cd OPC
          python manage.py check || echo "Django check failed but continuing"

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker system prune -af
          echo "Disk space after cleanup:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Create artifacts directory
        run: mkdir -p ./artifacts

      - name: Build Django image
        run: |
          echo "Building Django image..."
          docker build -t opc/django:latest -f OPC/Dockerfile OPC/
          docker system prune -f

      - name: Save Docker image to file (compressed)
        run: |
          echo "Saving and compressing Docker image..."
          docker save opc/django:latest | gzip > ./artifacts/django.tar.gz
          ls -la ./artifacts/
          docker rmi opc/django:latest || true
          df -h

      - name: Upload files and deploy using SSH
        run: |
          # Install sshpass for password authentication
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

          # Set connection details explicitly
          DROPLET_HOST="46.101.145.147"
          DROPLET_USERNAME="root"
          DROPLET_PASSWORD="BMI\$46515M"

          # Debug connection details (without showing password)
          echo "Host: $DROPLET_HOST"
          echo "Username: $DROPLET_USERNAME"
          echo "Password length: ${#DROPLET_PASSWORD}"

          # Test SSH connection with more verbose output
          echo "Testing SSH connection..."
          sshpass -p "$DROPLET_PASSWORD" ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -p 22 \
            $DROPLET_USERNAME@$DROPLET_HOST "echo 'SSH connection successful'"

          # Create directory on server
          echo "Creating directory on server..."
          sshpass -p "$DROPLET_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22 \
            $DROPLET_USERNAME@$DROPLET_HOST "mkdir -p /opt/opc"

          # Upload Docker image
          echo "Uploading Docker image..."
          sshpass -p "$DROPLET_PASSWORD" rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22" \
            ./artifacts/django.tar.gz $DROPLET_USERNAME@$DROPLET_HOST:/opt/opc/

          # Upload configuration files
          echo "Uploading configuration files..."
          sshpass -p "$DROPLET_PASSWORD" rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22" \
            OPC/docker-compose.prod.yml $DROPLET_USERNAME@$DROPLET_HOST:/opt/opc/

          sshpass -p "$DROPLET_PASSWORD" rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22" \
            nginx.conf $DROPLET_USERNAME@$DROPLET_HOST:/opt/opc/

          sshpass -p "$DROPLET_PASSWORD" rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22" \
            .env.production $DROPLET_USERNAME@$DROPLET_HOST:/opt/opc/

          echo "File upload completed!"

      - name: Deploy application
        run: |
          # Deploy using SSH with explicit credentials
          DROPLET_HOST="46.101.145.147"
          DROPLET_USERNAME="root"
          DROPLET_PASSWORD="BMI\$46515M"

          echo "Deploying application..."

          # Step 1: Install Docker and Docker Compose if needed
          echo "Step 1: Checking Docker installation..."
          sshpass -p "$DROPLET_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -p 22 \
            $DROPLET_USERNAME@$DROPLET_HOST << 'EOF'

          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            apt-get update
            apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            echo "Docker installed successfully"
          else
            echo "Docker is already installed"
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found, installing..."
            curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            echo "Docker Compose installed successfully"
          else
            echo "Docker Compose is already installed"
          fi
          EOF          # Step 2: Load Docker image (with better error handling)
          echo "Step 2: Loading Docker image..."
          sshpass -p "$DROPLET_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=20 -p 22 \
            $DROPLET_USERNAME@$DROPLET_HOST << 'EOF'

          cd /opt/opc

          # Check if compressed file exists
          if [ ! -f django.tar.gz ]; then
            echo "Error: django.tar.gz file not found!"
            exit 1
          fi

          # Clean up Docker system and fix potential issues
          echo "Cleaning up Docker system..."
          docker system prune -f
          sudo systemctl restart docker
          sleep 5

          # Check Docker status
          if ! docker info > /dev/null 2>&1; then
            echo "Docker is not running properly, restarting..."
            sudo systemctl restart docker
            sleep 10
          fi

          # Remove any existing image with same name
          docker rmi opc/django:latest 2>/dev/null || true

          # Load the image with better error handling
          echo "Loading Docker image from compressed file..."
          if gunzip -c django.tar.gz | docker load; then
            echo "Docker image loaded successfully via gunzip method"
          else
            echo "Gunzip method failed, trying alternative..."
            # Try uncompressing first then loading
            if gunzip django.tar.gz; then
              if docker load -i django.tar; then
                echo "Docker image loaded successfully via tar method"
              else
                echo "Docker load failed completely"
                exit 1
              fi
            else
              echo "Failed to uncompress django.tar.gz"
              exit 1
            fi
          fi

          # Verify the image was loaded
          if docker images | grep -q "opc/django"; then
            echo "✓ Docker image opc/django is available"
            docker images | grep opc/django
          else
            echo "✗ Failed to load Docker image"
            exit 1
          fi
          EOF          # Step 3: Deploy the application
          echo "Step 3: Deploying application..."
          sshpass -p "$DROPLET_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -p 22 \
            $DROPLET_USERNAME@$DROPLET_HOST << 'EOF'

          cd /opt/opc

          # Verify image is available before deployment
          if ! docker images | grep -q "opc/django"; then
            echo "Error: opc/django image not found. Cannot proceed with deployment."
            exit 1
          fi

          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down || true

          # Remove any orphaned containers
          docker container prune -f

          if [ "${{ github.event.inputs.full_deploy }}" == "true" ]; then
            echo "Performing full deployment..."
            docker-compose -f docker-compose.prod.yml up -d
          else
            echo "Performing targeted deployment..."
            # Use --no-deps to prevent pulling from registry
            docker-compose -f docker-compose.prod.yml up -d --no-deps web
            docker-compose -f docker-compose.prod.yml up -d --no-deps nginx
          fi

          # Wait for containers to start
          echo "Waiting for containers to start..."
          sleep 10

          # Check deployment status
          echo "Checking deployment status..."
          docker-compose -f docker-compose.prod.yml ps

          # Show container logs for debugging
          echo "Recent web container logs:"
          docker-compose -f docker-compose.prod.yml logs --tail=20 web || true

          # Clean up compressed files
          rm -f django.tar django.tar.gz

          echo "Deployment complete!"
          EOF

      - name: Clean up artifacts
        if: always()
        run: |
          echo "Cleaning up artifacts on GitHub runner..."
          rm -rf ./artifacts/
          docker image prune -f
          echo "Artifacts cleaned up successfully!"
